# Generated from PJPProject.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,36,227,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,
        1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,7,1,7,
        1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,
        11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,122,8,12,1,
        13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,
        15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,5,17,148,8,
        17,10,17,12,17,151,9,17,1,18,4,18,154,8,18,11,18,12,18,155,1,19,
        4,19,159,8,19,11,19,12,19,160,1,19,1,19,4,19,165,8,19,11,19,12,19,
        166,1,20,1,20,1,20,1,20,5,20,173,8,20,10,20,12,20,176,9,20,1,20,
        1,20,1,21,4,21,181,8,21,11,21,12,21,182,1,21,1,21,1,22,1,22,1,22,
        1,22,5,22,191,8,22,10,22,12,22,194,9,22,1,22,1,22,1,23,1,23,1,24,
        1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,30,
        1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,
        1,35,0,0,36,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
        23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,
        45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,
        67,34,69,35,71,36,1,0,6,2,0,65,90,97,122,3,0,48,57,65,90,97,122,
        1,0,48,57,3,0,10,10,13,13,34,34,3,0,9,10,13,13,32,32,2,0,10,10,13,
        13,235,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
        0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,
        0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,
        0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,
        0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,
        0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,
        0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,
        0,0,71,1,0,0,0,1,73,1,0,0,0,3,75,1,0,0,0,5,77,1,0,0,0,7,82,1,0,0,
        0,9,88,1,0,0,0,11,90,1,0,0,0,13,92,1,0,0,0,15,95,1,0,0,0,17,97,1,
        0,0,0,19,99,1,0,0,0,21,104,1,0,0,0,23,110,1,0,0,0,25,121,1,0,0,0,
        27,123,1,0,0,0,29,127,1,0,0,0,31,133,1,0,0,0,33,138,1,0,0,0,35,145,
        1,0,0,0,37,153,1,0,0,0,39,158,1,0,0,0,41,168,1,0,0,0,43,180,1,0,
        0,0,45,186,1,0,0,0,47,197,1,0,0,0,49,199,1,0,0,0,51,201,1,0,0,0,
        53,203,1,0,0,0,55,205,1,0,0,0,57,207,1,0,0,0,59,209,1,0,0,0,61,212,
        1,0,0,0,63,215,1,0,0,0,65,217,1,0,0,0,67,219,1,0,0,0,69,222,1,0,
        0,0,71,225,1,0,0,0,73,74,5,59,0,0,74,2,1,0,0,0,75,76,5,44,0,0,76,
        4,1,0,0,0,77,78,5,114,0,0,78,79,5,101,0,0,79,80,5,97,0,0,80,81,5,
        100,0,0,81,6,1,0,0,0,82,83,5,119,0,0,83,84,5,114,0,0,84,85,5,105,
        0,0,85,86,5,116,0,0,86,87,5,101,0,0,87,8,1,0,0,0,88,89,5,123,0,0,
        89,10,1,0,0,0,90,91,5,125,0,0,91,12,1,0,0,0,92,93,5,105,0,0,93,94,
        5,102,0,0,94,14,1,0,0,0,95,96,5,40,0,0,96,16,1,0,0,0,97,98,5,41,
        0,0,98,18,1,0,0,0,99,100,5,101,0,0,100,101,5,108,0,0,101,102,5,115,
        0,0,102,103,5,101,0,0,103,20,1,0,0,0,104,105,5,119,0,0,105,106,5,
        104,0,0,106,107,5,105,0,0,107,108,5,108,0,0,108,109,5,101,0,0,109,
        22,1,0,0,0,110,111,5,61,0,0,111,24,1,0,0,0,112,113,5,116,0,0,113,
        114,5,114,0,0,114,115,5,117,0,0,115,122,5,101,0,0,116,117,5,102,
        0,0,117,118,5,97,0,0,118,119,5,108,0,0,119,120,5,115,0,0,120,122,
        5,101,0,0,121,112,1,0,0,0,121,116,1,0,0,0,122,26,1,0,0,0,123,124,
        5,105,0,0,124,125,5,110,0,0,125,126,5,116,0,0,126,28,1,0,0,0,127,
        128,5,102,0,0,128,129,5,108,0,0,129,130,5,111,0,0,130,131,5,97,0,
        0,131,132,5,116,0,0,132,30,1,0,0,0,133,134,5,98,0,0,134,135,5,111,
        0,0,135,136,5,111,0,0,136,137,5,108,0,0,137,32,1,0,0,0,138,139,5,
        115,0,0,139,140,5,116,0,0,140,141,5,114,0,0,141,142,5,105,0,0,142,
        143,5,110,0,0,143,144,5,103,0,0,144,34,1,0,0,0,145,149,7,0,0,0,146,
        148,7,1,0,0,147,146,1,0,0,0,148,151,1,0,0,0,149,147,1,0,0,0,149,
        150,1,0,0,0,150,36,1,0,0,0,151,149,1,0,0,0,152,154,7,2,0,0,153,152,
        1,0,0,0,154,155,1,0,0,0,155,153,1,0,0,0,155,156,1,0,0,0,156,38,1,
        0,0,0,157,159,7,2,0,0,158,157,1,0,0,0,159,160,1,0,0,0,160,158,1,
        0,0,0,160,161,1,0,0,0,161,162,1,0,0,0,162,164,5,46,0,0,163,165,7,
        2,0,0,164,163,1,0,0,0,165,166,1,0,0,0,166,164,1,0,0,0,166,167,1,
        0,0,0,167,40,1,0,0,0,168,174,5,34,0,0,169,173,8,3,0,0,170,171,5,
        92,0,0,171,173,5,34,0,0,172,169,1,0,0,0,172,170,1,0,0,0,173,176,
        1,0,0,0,174,172,1,0,0,0,174,175,1,0,0,0,175,177,1,0,0,0,176,174,
        1,0,0,0,177,178,5,34,0,0,178,42,1,0,0,0,179,181,7,4,0,0,180,179,
        1,0,0,0,181,182,1,0,0,0,182,180,1,0,0,0,182,183,1,0,0,0,183,184,
        1,0,0,0,184,185,6,21,0,0,185,44,1,0,0,0,186,187,5,47,0,0,187,188,
        5,47,0,0,188,192,1,0,0,0,189,191,8,5,0,0,190,189,1,0,0,0,191,194,
        1,0,0,0,192,190,1,0,0,0,192,193,1,0,0,0,193,195,1,0,0,0,194,192,
        1,0,0,0,195,196,6,22,0,0,196,46,1,0,0,0,197,198,5,43,0,0,198,48,
        1,0,0,0,199,200,5,45,0,0,200,50,1,0,0,0,201,202,5,42,0,0,202,52,
        1,0,0,0,203,204,5,47,0,0,204,54,1,0,0,0,205,206,5,37,0,0,206,56,
        1,0,0,0,207,208,5,46,0,0,208,58,1,0,0,0,209,210,5,38,0,0,210,211,
        5,38,0,0,211,60,1,0,0,0,212,213,5,124,0,0,213,214,5,124,0,0,214,
        62,1,0,0,0,215,216,5,62,0,0,216,64,1,0,0,0,217,218,5,60,0,0,218,
        66,1,0,0,0,219,220,5,61,0,0,220,221,5,61,0,0,221,68,1,0,0,0,222,
        223,5,33,0,0,223,224,5,61,0,0,224,70,1,0,0,0,225,226,5,33,0,0,226,
        72,1,0,0,0,10,0,121,149,155,160,166,172,174,182,192,1,6,0,0
    ]

class PJPProjectLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    BOOL_LITERAL = 13
    INT = 14
    FLOAT = 15
    BOOL = 16
    STRING = 17
    ID = 18
    INT_LITERAL = 19
    FLOAT_LITERAL = 20
    STRING_LITERAL = 21
    WS = 22
    COMMENT = 23
    ADD = 24
    SUB = 25
    MUL = 26
    DIV = 27
    MOD = 28
    CONCAT = 29
    AND = 30
    OR = 31
    GT = 32
    LT = 33
    EQ = 34
    NOTEQ = 35
    NOT = 36

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "','", "'read'", "'write'", "'{'", "'}'", "'if'", "'('", 
            "')'", "'else'", "'while'", "'='", "'int'", "'float'", "'bool'", 
            "'string'", "'+'", "'-'", "'*'", "'/'", "'%'", "'.'", "'&&'", 
            "'||'", "'>'", "'<'", "'=='", "'!='", "'!'" ]

    symbolicNames = [ "<INVALID>",
            "BOOL_LITERAL", "INT", "FLOAT", "BOOL", "STRING", "ID", "INT_LITERAL", 
            "FLOAT_LITERAL", "STRING_LITERAL", "WS", "COMMENT", "ADD", "SUB", 
            "MUL", "DIV", "MOD", "CONCAT", "AND", "OR", "GT", "LT", "EQ", 
            "NOTEQ", "NOT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "BOOL_LITERAL", 
                  "INT", "FLOAT", "BOOL", "STRING", "ID", "INT_LITERAL", 
                  "FLOAT_LITERAL", "STRING_LITERAL", "WS", "COMMENT", "ADD", 
                  "SUB", "MUL", "DIV", "MOD", "CONCAT", "AND", "OR", "GT", 
                  "LT", "EQ", "NOTEQ", "NOT" ]

    grammarFileName = "PJPProject.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


